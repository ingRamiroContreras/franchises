AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway with Load Balancer, EC2 Auto Scaling Group in private
  subnets, and MySQL RDS

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: RDS instance class
  DBName:
    Type: String
    Default: mydb
    Description: Database name
  DBUsername:
    Type: String
    Description: Database admin username
  DBPassword:
    Type: String
    NoEcho: true
    Description: Database admin password
  SpringProfile:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "Environment profile for Spring Boot"

Resources:
  # VPC y subredes
  NequiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: NequiVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.5.0/24

  PrivateSubnetDB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NequiVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.6.0/24

  # Nat Gateway
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NequiVPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NequiVPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Crear un IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Asociar el IGW a tu VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NequiVPC
      InternetGatewayId: !Ref InternetGateway

  # Crear la tabla de rutas para la subred pública
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NequiVPC

  # Asociar la subred pública a esa tabla
  PublicSubnetAssociations1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetAssociations2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2  # Asociar PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  # Crear la ruta por default hacia el IGW
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Crear la base de datos MySQL

  MySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20 # GB, apto para capa gratuita
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup  # Asegúrate de tenerlo definido
      DBSubnetGroupName: !Ref MyDBSubnetGroup
  
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - !Ref PrivateSubnetDB1
        - !Ref PrivateSubnetDB2

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS MySQL allowing access from app servers
      VpcId: !Ref NequiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security for Auto Scaling Group instances
      VpcId: !Ref NequiVPC  # Replace with your VPC reference
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # For production, restrict to specific IPs
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # creacion de role para poder conectarme por ssm a la instancia ec2

  MyLaunchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        
  MyLaunchRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MyLaunchRole

  # Crear el Launch Template

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MiLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-06c8f2ec674c67112   # AMI compatible
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref MyLaunchRoleProfile
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > /var/log/userdata.log 2>&1

            echo "Iniciando script de configuración..."

            # Mostrar los parámetros que recibe
            echo "DBName: ${DBName}"
            echo "DBUsername: ${DBUsername}"
            echo "DBPassword: ${DBPassword}"
            echo "SpringProfile: ${SpringProfile}"

            # Actualiza todos los paquetes
            yum update -y

            # Instala herramientas
            yum install -y git docker wget tar

            # Instala Java 17
            yum install -y java-17-amazon-corretto

            # Inicia Docker
            systemctl enable docker
            systemctl start docker

            # Espera Docker listo
            while ! docker info > /dev/null 2>&1; do sleep 1; done

            # Descarga Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            echo "Creando archivo .env con perfil ${SpringProfile}..."
            echo "SPRING_PROFILES_ACTIVE=${SpringProfile}" > /home/ec2-user/.env
            chown ec2-user:ec2-user /home/ec2-user/.env

            # Clona el repositorio
            git clone https://github.com/ingRamiroContreras/franchises.git /opt/franchises

            # Entra en el directorio
            cd /opt/franchises

            # Definir HOME para Maven
            echo "Configurando variable HOME para Maven..."
            export HOME=/home/ec2-user

            # Exporta los parámetros para Docker
            echo "Exportando variables..."
            export DB_NAME=${DBName}
            export DB_USER=${DBUsername}
            export DB_PASS=${DBPassword}
            export SPRING_PROFILE=${SpringProfile}
            # Si tienes host/puerto a definir, también
            export DB_HOST="${MySQLDatabase.Endpoint.Address}"

            # Muestra las variables exportadas
            echo "DB_NAME: $DB_NAME"
            echo "DB_USER: $DB_USER"
            echo "DB_PASS: $DB_PASS"
            echo "SPRING_PROFILE: $SPRING_PROFILE"

            # Construye
            ./mvnw clean package
            ls -l target/

            if [ ! -f target/franchises-0.0.1-SNAPSHOT.jar ]; then
              echo "NO se encontró el JAR."
            else
              echo "Archivo JAR listo."
            fi

            # Ejecuta docker-compose
            echo "Iniciando Docker Compose..."
            docker-compose up -d

            echo "Script finalizado."


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref AppTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300


  # Crear el Load Balancer

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref NequiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0


  # Crear el Target Group
  # y el Listener para el Load Balancer
  # y el Target Group para el Auto Scaling Group

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: app-target-group
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref NequiVPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: '8080'
      HealthCheckPath: /health  # ajusta si quieres otro path
      Matcher:
        HttpCode: 200-399
  
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  